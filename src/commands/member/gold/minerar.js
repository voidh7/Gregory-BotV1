const path = require("path");
const { PREFIX } = require(`${BASE_DIR}/config`);
const { loadDB, saveDB, getUser, resetIfNewDay } = require(path.join(__dirname, "goldSystem.js"));

module.exports = {
  name: "minerar_gold",
  description: "Tente minerar ouro (50% de chance, mÃ¡x. 3x por dia).",
  commands: ["minerar_gold", "minerar"],
  usage: `${PREFIX}minerar_gold`,

  handle: async ({ socket, remoteJid, userJid, message }) => {
    const db = loadDB();
    const groupId = remoteJid;
    const userId = userJid.split("@")[0];
    const today = new Date().toISOString().split("T")[0];

    const user = getUser(db, groupId, userId);
    resetIfNewDay(user, today);

    // bÃ´nus do primeiro comando do dia
    if (!user.ganhouDaily) {
      user.gold += 20;
      user.ganhouDaily = true;
      await socket.sendMessage(remoteJid, {
        text: `ğŸ˜³ eâ€¦ oi @${userId}â€¦ vocÃª ganhou 20 gold pelo primeiro comando do diaâ€¦`,
        mentions: [userJid],
        quoted: message
      });
    }

    if (!user.minerarHoje) user.minerarHoje = 0;
    if (user.minerarHoje >= 3) {
      return socket.sendMessage(remoteJid, {
        text: `ğŸ˜¶ eâ€¦ hmâ€¦ @${userId}â€¦ vocÃª jÃ¡ minerou 3 vezes hojeâ€¦ melhor descansar um pouquinhoâ€¦`,
        mentions: [userJid],
        quoted: message
      });
    }

    user.minerarHoje++;

    if (Math.random() < 0.5) {
      user.gold += 20;
      await socket.sendMessage(remoteJid, {
        text: `ğŸ™‚ eâ€¦ hmâ€¦ @${userId}â€¦ vocÃª encontrou 20 goldsâ€¦ boaâ€¦`,
        mentions: [userJid],
        quoted: message
      });
    } else {
      await socket.sendMessage(remoteJid, {
        text: `ğŸ˜¶ eâ€¦ hmâ€¦ @${userId}â€¦ vocÃª minerou, masâ€¦ nÃ£o encontrou nadaâ€¦ sinto muitoâ€¦`,
        mentions: [userJid],
        quoted: message
      });
    }

    saveDB(db);
  }
}; 
